name: build_release
# Workflow file for windows
on:
  push:
    branches:
      - master
  pull_request: {}

jobs:
  Windows:
    name: build-windows
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
          submodules: recursive

    #Use setup-cpp to setup C++ environment (CMake and GCC, adds both to PATH)
    - name: Setup Cpp (C++ / C)
      uses: aminya/setup-cpp@v0.26.2
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ contains(matrix.os, 'windows' )}}
        gcc: true
        cmake: true
        
    # Add MSBuild to PATH since setup-cpp doesn't do that for dome reason
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    # Configure CMake
    - name: Running cmake (windows)
      run: |
        cd ${{ github.workspace }}
        mkdir build
        cd build
        cmake ../ -DCMAKE_GENERATOR_PLATFORM=Win32

    # Build sln file
    - name: Build Solution (windows)
      run: |
        cd build
        MSBuild.exe Fuser_CustomSongCreator.sln

    # Zip Debug folder for nightly release
    - name: Easy Zip Files
      uses: vimtor/action-zip@v1.1
      with:
        files: debug/
        dest: release.zip


    # Upload Artifact
    - name: Upload production-ready build files
      uses: actions/upload-artifact@v3
      with:
        name: Nightly-Debug-Build
        path: ./build/Debug

    # Create release with release.zip
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          release.zip
